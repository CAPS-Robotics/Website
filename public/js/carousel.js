/// <reference path="jquery.d.ts" />
var Carousel = (function () {
    function Carousel(selector) {
        this.time = 6000;
        this.target = 0;
        this.element = $(selector);
        this.itemContainer = this.element.children("#carousel-items");
        this.items = this.itemContainer.children();
        this.controller = this.element.children("#carousel-controls");
        this.initialize();
    }
    Carousel.prototype.initialize = function () {
        this.createControls();
        this.rotate();
        this.startLoop();
    };
    Carousel.prototype.startLoop = function () {
        this.loop = window.setInterval(function (carousel) {
            carousel.updateTarget();
            carousel.rotate();
        }, this.time, this);
    };
    Carousel.prototype.updateTarget = function (target) {
        if (target === void 0) { target = this.target + 1; }
        this.target = target % this.items.length;
    };
    Carousel.prototype.rotate = function () {
        var target = this.target;
        $.each(this.items, function (index, value) {
            if (index != target) {
                $(value).addClass("carousel-hidden");
            }
            else {
                $(value).removeClass("carousel-hidden");
            }
        });
        $.each(this.controls, function (index, value) {
            if (index != target) {
                $(value).removeClass("carousel-control--active");
            }
            else {
                $(value).addClass("carousel-control--active");
            }
        });
    };
    Carousel.prototype.createControls = function () {
        var carousel = this;
        for (var i = 0; i < this.items.length; i++) {
            this.controller.append($("<div></div>")
                .addClass("carousel-control")
                .attr("data-carousel-index", i.toString())
                .on('click', function (event) {
                var $self = $(this);
                var target = parseInt($self.attr("data-carousel-index"));
                carousel.updateTarget(target);
                carousel.rotate();
                window.clearInterval(carousel.loop);
                carousel.startLoop();
                return false;
            }));
        }
        this.controls = this.controller.children();
    };
    return Carousel;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcm91c2VsLnRzIl0sIm5hbWVzIjpbIkNhcm91c2VsIiwiQ2Fyb3VzZWwuY29uc3RydWN0b3IiLCJDYXJvdXNlbC5pbml0aWFsaXplIiwiQ2Fyb3VzZWwuc3RhcnRMb29wIiwiQ2Fyb3VzZWwudXBkYXRlVGFyZ2V0IiwiQ2Fyb3VzZWwucm90YXRlIiwiQ2Fyb3VzZWwuY3JlYXRlQ29udHJvbHMiXSwibWFwcGluZ3MiOiJBQUFBLG9DQUFvQztBQUVwQztJQVVJQSxrQkFBWUEsUUFBZ0JBO1FBSnBCQyxTQUFJQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUNwQkEsV0FBTUEsR0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFJdkJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1FBQzNCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO1FBQzlEQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUMzQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtRQUU5REEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBRU9ELDZCQUFVQSxHQUFsQkE7UUFDSUUsSUFBSUEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFDdEJBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1FBQ2RBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO0lBQ3JCQSxDQUFDQTtJQUVPRiw0QkFBU0EsR0FBakJBO1FBQ0lHLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLFVBQVNBLFFBQVFBO1lBQzVDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN4QixRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxFQUFFQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUN4QkEsQ0FBQ0E7SUFFT0gsK0JBQVlBLEdBQXBCQSxVQUFxQkEsTUFBd0JBO1FBQXhCSSxzQkFBd0JBLEdBQXhCQSxTQUFTQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQTtRQUN6Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDN0NBLENBQUNBO0lBRU9KLHlCQUFNQSxHQUFkQTtRQUNJSyxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUV6QkEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsVUFBU0EsS0FBS0EsRUFBRUEsS0FBS0E7WUFDcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDTCxDQUFDLENBQUNBLENBQUNBO1FBRUhBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLFVBQVNBLEtBQUtBLEVBQUVBLEtBQUtBO1lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDckQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUNsRCxDQUFDO1FBQ0wsQ0FBQyxDQUFDQSxDQUFDQTtJQUVQQSxDQUFDQTtJQUVPTCxpQ0FBY0EsR0FBdEJBO1FBQ0lNLElBQUlBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO1FBRXBCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsYUFBYUEsQ0FBQ0E7aUJBQ2RBLFFBQVFBLENBQUNBLGtCQUFrQkEsQ0FBQ0E7aUJBQzVCQSxJQUFJQSxDQUFDQSxxQkFBcUJBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO2lCQUN6Q0EsRUFBRUEsQ0FBQ0EsT0FBT0EsRUFBRUEsVUFBU0EsS0FBS0E7Z0JBQ3ZCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO2dCQUV6RCxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM5QixRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBRWxCLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBRXJCLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsQ0FBQyxDQUFDQSxDQUFDQSxDQUFDQTtRQUNoQ0EsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7SUFDL0NBLENBQUNBO0lBQ0xOLGVBQUNBO0FBQURBLENBaEZBLEFBZ0ZDQSxJQUFBIiwiZmlsZSI6ImNhcm91c2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImpxdWVyeS5kLnRzXCIgLz5cblxuY2xhc3MgQ2Fyb3VzZWwge1xuICAgIHByaXZhdGUgZWxlbWVudDogSlF1ZXJ5O1xuICAgIHByaXZhdGUgaXRlbUNvbnRhaW5lcjogSlF1ZXJ5O1xuICAgIHByaXZhdGUgaXRlbXM6IEpRdWVyeTtcbiAgICBwcml2YXRlIGNvbnRyb2xsZXI6IEpRdWVyeTtcbiAgICBwcml2YXRlIGNvbnRyb2xzOiBKUXVlcnk7XG4gICAgcHJpdmF0ZSB0aW1lOiBOdW1iZXIgPSA2MDAwO1xuICAgIHByaXZhdGUgdGFyZ2V0OiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgbG9vcDtcblxuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gJChzZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuaXRlbUNvbnRhaW5lciA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbihcIiNjYXJvdXNlbC1pdGVtc1wiKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbUNvbnRhaW5lci5jaGlsZHJlbigpO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oXCIjY2Fyb3VzZWwtY29udHJvbHNcIik7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRyb2xzKCk7XG4gICAgICAgIHRoaXMucm90YXRlKCk7XG4gICAgICAgIHRoaXMuc3RhcnRMb29wKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydExvb3AoKSB7XG4gICAgICAgIHRoaXMubG9vcCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbihjYXJvdXNlbCkge1xuICAgICAgICAgICAgY2Fyb3VzZWwudXBkYXRlVGFyZ2V0KCk7XG4gICAgICAgICAgICBjYXJvdXNlbC5yb3RhdGUoKTtcbiAgICAgICAgfSwgdGhpcy50aW1lLCB0aGlzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVRhcmdldCh0YXJnZXQgPSB0aGlzLnRhcmdldCArIDEpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQgJSB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJvdGF0ZSgpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gICAgICAgICQuZWFjaCh0aGlzLml0ZW1zLCBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAkKHZhbHVlKS5hZGRDbGFzcyhcImNhcm91c2VsLWhpZGRlblwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCh2YWx1ZSkucmVtb3ZlQ2xhc3MoXCJjYXJvdXNlbC1oaWRkZW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLmNvbnRyb2xzLCBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAkKHZhbHVlKS5yZW1vdmVDbGFzcyhcImNhcm91c2VsLWNvbnRyb2wtLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCh2YWx1ZSkuYWRkQ2xhc3MoXCJjYXJvdXNlbC1jb250cm9sLS1hY3RpdmVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVDb250cm9scygpIHtcbiAgICAgICAgdmFyIGNhcm91c2VsID0gdGhpcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlci5hcHBlbmQoJChcIjxkaXY+PC9kaXY+XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJjYXJvdXNlbC1jb250cm9sXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRhdGEtY2Fyb3VzZWwtaW5kZXhcIiwgaS50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRzZWxmID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcGFyc2VJbnQoJHNlbGYuYXR0cihcImRhdGEtY2Fyb3VzZWwtaW5kZXhcIikpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Fyb3VzZWwudXBkYXRlVGFyZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Fyb3VzZWwucm90YXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChjYXJvdXNlbC5sb29wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbC5zdGFydExvb3AoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29udHJvbHMgPSB0aGlzLmNvbnRyb2xsZXIuY2hpbGRyZW4oKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=