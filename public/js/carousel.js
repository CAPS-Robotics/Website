var Carousel = (function () {
    function Carousel(element, controller) {
        this.element = element;
        this.controller = controller;
        this.items = this.element.children;
        this.itemCount = this.items.length;
        this.targetItem = 0;
        this.time = 6000;
        this.initializeDOM();
        this.startUpdateLoop();
    }
    Carousel.prototype.startUpdateLoop = function () {
        this.loop = setInterval(this.updateLoop, this.time, this);
    };
    Carousel.prototype.updateLoop = function (carousel) {
        carousel.targetItem++;
        carousel.setItemsLocations();
        carousel.setTextInvisibleWhenNotTargeted();
        carousel.fillTargetedControl();
    };
    Carousel.prototype.initializeDOM = function () {
        this.addCarouselItemClass();
        this.setItemsLocations();
        this.makeControls();
        this.fillTargetedControl();
    };
    Carousel.prototype.addCarouselItemClass = function () {
        for (var i = 0; i < this.itemCount; i++) {
            Utils.addClass(this.items[i], "carousel-item");
        }
    };
    Carousel.prototype.setItemsLocations = function () {
        for (var i = 0; i < this.itemCount; i++) {
            this.setItemLocation(this.items[i], i, this.itemCount, this.targetItem);
        }
    };
    Carousel.prototype.setItemLocation = function (item, index, length, target) {
        var offset = this.getCalculatedItemLocation(index, length, target) * this.element.clientWidth;
        var zIndex = length + this.getCalculatedItemLocation(index, length, target);
        item.setAttribute("style", "left: " + offset.toString() + "px; z-index: " + zIndex + ";");
    };
    Carousel.prototype.getCalculatedItemLocation = function (index, length, target) {
        var value = (target - index) % length;
        var mid = Math.floor(length / 2);
        return (value <= mid && value >= -mid) ?
            value :
            ((value > mid) ?
                (value - length) :
                (value + length));
    };
    Carousel.prototype.setTextInvisibleWhenNotTargeted = function () {
        for (var i = 0; i < this.itemCount; i++) {
            var item = this.items[i];
            if (i !== this.targetItem % this.itemCount) {
                Utils.addClass(item, "carousel-text-hidden");
            }
            else {
                Utils.removeClass(item, "carousel-text-hidden");
            }
        }
    };
    Carousel.prototype.makeControls = function () {
        for (var i = 0; i < this.itemCount; i++) {
            var control = document.createElement("span");
            Utils.addClass(control, "carousel-control");
            this.controller.appendChild(control);
        }
    };
    Carousel.prototype.fillTargetedControl = function () {
        for (var i = 0; i < this.itemCount; i++) {
            var control = this.controller.children[i];
            if (i !== this.targetItem % this.itemCount) {
                Utils.removeClass(control, "carousel-control--active");
            }
            else {
                Utils.addClass(control, "carousel-control--active");
            }
        }
    };
    return Carousel;
})();

//# sourceMappingURL=data:application/json;base64,